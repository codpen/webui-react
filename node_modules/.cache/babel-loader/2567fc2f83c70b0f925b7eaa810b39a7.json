{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/Base/RunningJobs/RunningJobs.js\";\nimport React from 'react';\nimport { Card, CardBody, CardHeader, Col, Progress, Row } from \"reactstrap\";\nimport \"../../../utils/Global\";\nimport { formatBytes, secondsToStr } from \"../../../utils/Tools\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nvar propTypes = {\n  mode: PropTypes.string.isRequired\n};\n\nfunction JobCard(_ref) {\n  var job = _ref.job;\n  var name = job.name,\n      eta = job.eta,\n      percentage = job.percentage,\n      speed = job.speed,\n      speedAvg = job.speedAvg,\n      size = job.size,\n      bytes = job.bytes;\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Running Jobs\"), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, name), \" \", React.createElement(Progress, {\n    value: percentage,\n    className: \"mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, percentage, \" %\"), \" \", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Speed: \"), formatBytes(speed), \"PS\"), \" \", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Average Speed: \"), formatBytes(speedAvg), \"PS\"), \" \", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Total transferred: \"), formatBytes(bytes)), \" \", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Size: \"), formatBytes(size)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"ETA: \"), secondsToStr(eta), \" seconds\")));\n}\n\nfunction JobCardRow(_ref2) {\n  var job = _ref2.job;\n  var name = job.name,\n      percentage = job.percentage,\n      speed = job.speed,\n      size = job.size;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, size && speed ? React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, name, \"(\", formatBytes(size), \") - \", formatBytes(speed), \"PS \") : React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Calculating\")), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Progress, {\n    value: percentage,\n    className: \"mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, percentage, \" %\"))));\n}\n\nfunction GlobalStatus(_ref3) {\n  var stats = _ref3.stats;\n  var speed = stats.speed,\n      bytes = stats.bytes,\n      checks = stats.checks,\n      elapsedTime = stats.elapsedTime,\n      deletes = stats.deletes,\n      errors = stats.errors,\n      transfers = stats.transfers;\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Global Stats\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Bytes Transferred: \"), formatBytes(bytes)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Average Speed: \"), formatBytes(speed), \"PS\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Checks: \"), checks), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Deletes: \"), deletes), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Running since: \"), secondsToStr(elapsedTime)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Errors: \"), errors), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Transfers: \"), transfers)));\n}\n\nfunction TransferringJobs(_ref4) {\n  var transferring = _ref4.transferring;\n\n  // const {transferring} = this.state.jobs;\n  if (transferring !== undefined) {\n    return transferring.map(function (item, idx) {\n      return React.createElement(JobCard, {\n        key: idx,\n        job: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    });\n  }\n\n  return null;\n}\n\nfunction TransferringJobsRow(_ref5) {\n  var transferring = _ref5.transferring;\n\n  // const {transferring} = this.state.jobs;\n  if (transferring !== undefined) {\n    return transferring.map(function (item, idx) {\n      return React.createElement(JobCardRow, {\n        key: idx,\n        job: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n    });\n  }\n\n  return null;\n}\n\nvar RunningJobs =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RunningJobs, _React$Component);\n\n  function RunningJobs(props) {\n    var _this;\n\n    _classCallCheck(this, RunningJobs);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RunningJobs).call(this, props));\n    _this.state = {\n      jobs: {},\n      isConnected: false\n    };\n    return _this;\n  }\n\n  _createClass(RunningJobs, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          jobs = _this$props.jobs,\n          isConnected = _this$props.isConnected; // const { isConnected} = this.state;\n\n      var transferring = jobs.transferring;\n      var mode = this.props.mode;\n\n      if (mode === \"full-status\") {\n        if (isConnected) {\n          return React.createElement(Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          }, React.createElement(Col, {\n            sm: 12,\n            lg: 4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, React.createElement(GlobalStatus, {\n            stats: jobs,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          })), React.createElement(Col, {\n            sm: 12,\n            lg: 4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          }, React.createElement(TransferringJobs, {\n            transferring: transferring,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          })));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }, \"Not connected to rclone.\");\n        }\n      } else if (mode === \"card\") {\n        if (isConnected) {\n          return React.createElement(TransferringJobsRow, {\n            transferring: transferring,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          });\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, \"Not connected to rclone.\");\n        }\n      } else if (mode === \"modal\") {\n        if (transferring && transferring.length > 0) return React.createElement(Card, {\n          className: \"progress-modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(CardHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Progress\"), React.createElement(CardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(TransferringJobsRow, {\n          transferring: transferring,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        })));\n        return null;\n      }\n    }\n  }]);\n\n  return RunningJobs;\n}(React.Component);\n\nRunningJobs.propTypes = propTypes;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    jobs: state.status.jobs,\n    isConnected: state.status.isConnected,\n    error: state.status.error\n  };\n};\n\nexport default connect(mapStateToProps, {})(RunningJobs);","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/Base/RunningJobs/RunningJobs.js"],"names":["React","Card","CardBody","CardHeader","Col","Progress","Row","formatBytes","secondsToStr","PropTypes","connect","propTypes","mode","string","isRequired","JobCard","job","name","eta","percentage","speed","speedAvg","size","bytes","JobCardRow","GlobalStatus","stats","checks","elapsedTime","deletes","errors","transfers","TransferringJobs","transferring","undefined","map","item","idx","TransferringJobsRow","RunningJobs","props","state","jobs","isConnected","length","Component","mapStateToProps","status","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Card, CardBody, CardHeader, Col, Progress, Row} from \"reactstrap\";\nimport \"../../../utils/Global\";\nimport {formatBytes, secondsToStr} from \"../../../utils/Tools\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\nconst propTypes = {\n    mode: PropTypes.string.isRequired\n};\n\nfunction JobCard({job}) {\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\n    return (<Card>\n        <CardHeader>Running Jobs</CardHeader>\n        <CardBody>\n            <p>{name}</p> {/*Name of the file*/}\n            <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\n            <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\n            <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\n            <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\n            <p><strong>Size: </strong>{formatBytes(size)}</p>\n            <p><strong>ETA: </strong>{secondsToStr(eta)} seconds</p>\n        </CardBody>\n\n    </Card>);\n\n}\n\nfunction JobCardRow({job}) {\n    const {name, percentage, speed, size} = job;\n    return (\n        <React.Fragment>\n            <Row>\n                {(size && speed) ? (<Col lg={12}>{name}({formatBytes(size)}) - {formatBytes(speed)}PS </Col>) : (\n                    <Col lg={12}>Calculating</Col>)}\n\n            </Row>\n            <Row>\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\n            </Row>\n\n        </React.Fragment>\n    );\n\n}\n\nfunction GlobalStatus({stats}) {\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers} = stats;\n    return (\n        <Card>\n            <CardHeader><strong>Global Stats</strong></CardHeader>\n            <CardBody>\n                <p><strong>Bytes Transferred: </strong>{formatBytes(bytes)}</p>\n                <p><strong>Average Speed: </strong>{formatBytes(speed)}PS</p>\n                <p><strong>Checks: </strong>{checks}</p>\n                <p><strong>Deletes: </strong>{deletes}</p>\n                <p><strong>Running since: </strong>{secondsToStr(elapsedTime)}</p>\n                <p><strong>Errors: </strong>{errors}</p>\n                <p><strong>Transfers: </strong>{transfers}</p>\n\n            </CardBody>\n            {/*<CardFooter></CardFooter>*/}\n\n        </Card>);\n\n}\n\nfunction TransferringJobs({transferring}) {\n    // const {transferring} = this.state.jobs;\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCard key={idx} job={item}/>);\n        });\n    }\n    return null;\n}\n\nfunction TransferringJobsRow({transferring}) {\n    // const {transferring} = this.state.jobs;\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCardRow key={idx} job={item}/>);\n        });\n    }\n    return null;\n}\n\n\nclass RunningJobs extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            jobs: {},\n            isConnected: false\n\n        };\n    }\n\n\n    render() {\n        const {jobs, isConnected} = this.props;\n        // const { isConnected} = this.state;\n        const {transferring} = jobs;\n        const {mode} = this.props;\n        if (mode === \"full-status\") {\n            if (isConnected) {\n                return (\n                    <Row>\n                        <Col sm={12} lg={4}>\n                            <GlobalStatus stats={jobs}/>\n                        </Col>\n                        <Col sm={12} lg={4}>\n                            <TransferringJobs transferring={transferring}/>\n                        </Col>\n                    </Row>);\n            } else {\n                return (<div>Not connected to rclone.</div>)\n            }\n\n        } else if (mode === \"card\") {\n            if (isConnected) {\n                return (\n\n                    <TransferringJobsRow transferring={transferring}/>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>);\n            }\n\n        } else if (mode === \"modal\") {\n            if (transferring && transferring.length > 0)\n                return (\n                    <Card className={\"progress-modal\"}>\n                        <CardHeader>Progress</CardHeader>\n                        <CardBody>\n                            <TransferringJobsRow transferring={transferring}/>\n\n                        </CardBody>\n                    </Card>\n                );\n            return null;\n        }\n\n    }\n}\n\nRunningJobs.propTypes = propTypes;\n\nconst mapStateToProps = state => ({\n    jobs: state.status.jobs,\n    isConnected: state.status.isConnected,\n    error: state.status.error\n});\n\nexport default connect(mapStateToProps, {})(RunningJobs);\n"]},"metadata":{},"sourceType":"module"}