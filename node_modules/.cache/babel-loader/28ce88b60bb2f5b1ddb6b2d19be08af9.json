{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/Base/BackendStatusCard/BackendStatusCard.js\";\nimport React from \"react\";\nimport { Button, Card, CardBody, CardHeader } from \"reactstrap\";\nimport \"../../../utils/Global.js\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport { connect } from \"react-redux\";\nimport { getStatus } from \"../../../actions/statusActions\";\n\nfunction TaskModal() {\n  return ReactDOM.createPortal(React.createElement(RunningJobs, {\n    mode: \"modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), document.getElementById(\"modal-root\"));\n}\n\nvar BackendStatusCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BackendStatusCard, _React$Component);\n\n  function BackendStatusCard() {\n    _classCallCheck(this, BackendStatusCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BackendStatusCard).apply(this, arguments));\n  }\n\n  _createClass(BackendStatusCard, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this = this;\n\n      // Check if the connection to the backend is active\n      this.refreshInterval = setInterval(function () {\n        return _this.props.getStatus();\n      }, 5000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clear the interval before component is unmounted\n      clearInterval(this.refreshInterval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isConnected = this.props.isConnected;\n      var ipAddress = localStorage.getItem('ipAddress');\n      if (this.props.mode === \"card\") return React.createElement(Card, {\n        className: \"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"rclone status\"), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(StatusText, {\n        connectivityStatus: isConnected,\n        ipAddress: ipAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })));else\n        /*Default*/\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(Button, {\n          type: \"primary\",\n          className: isConnected ? \"bg-info\" : \"bg-warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, isConnected ? \"CONNECTED\" : \"DISCONNECTED\"), React.createElement(TaskModal, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n    }\n  }]);\n\n  return BackendStatusCard;\n}(React.Component);\n\nfunction StatusText(_ref) {\n  var connectivityStatus = _ref.connectivityStatus,\n      ipAddress = _ref.ipAddress;\n\n  if (connectivityStatus) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"The rclone backend is connected and working as expected.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), \"Current IP address is \", ipAddress, \".\");\n  } else {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Cannot connect to rclone backend. There is a problem with connecting to \", ipAddress, \".\");\n  }\n}\n\nvar propTypes = {\n  mode: PropTypes.string\n};\nvar defaultProps = {\n  mode: \"card\"\n};\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isConnected: state.status.isConnected\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getStatus: getStatus\n})(BackendStatusCard);","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/Base/BackendStatusCard/BackendStatusCard.js"],"names":["React","Button","Card","CardBody","CardHeader","PropTypes","ReactDOM","RunningJobs","connect","getStatus","TaskModal","createPortal","document","getElementById","BackendStatusCard","refreshInterval","setInterval","props","clearInterval","isConnected","ipAddress","localStorage","getItem","mode","Component","StatusText","connectivityStatus","propTypes","string","defaultProps","mapStateToProps","state","status"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\nimport \"../../../utils/Global.js\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport {connect} from \"react-redux\";\nimport {getStatus} from \"../../../actions/statusActions\";\n\n\nfunction TaskModal() {\n    return ReactDOM.createPortal((\n        <RunningJobs mode={\"modal\"}/>\n\n    ), document.getElementById(\"modal-root\"));\n}\n\nclass BackendStatusCard extends React.Component {\n\n\n    componentWillMount() {\n\n        // Check if the connection to the backend is active\n        this.refreshInterval = setInterval(() => this.props.getStatus(), 5000);\n    }\n\n\n    componentWillUnmount() {\n        // Clear the interval before component is unmounted\n        clearInterval(this.refreshInterval);\n    }\n\n    render() {\n        const {isConnected} = this.props;\n\n        const ipAddress = localStorage.getItem('ipAddress');\n\n        if (this.props.mode === \"card\")\n            return (\n\n                <Card\n                    className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\n                    <CardHeader>\n                        rclone status\n                    </CardHeader>\n                    <CardBody>\n                        <StatusText connectivityStatus={isConnected} ipAddress={ipAddress}/>\n\n                    </CardBody>\n                </Card>\n            );\n        else /*Default*/\n            return (\n                <React.Fragment>\n                    <Button type=\"primary\"\n                            className={isConnected ? \"bg-info\" : \"bg-warning\"}>{isConnected ? \"CONNECTED\" : \"DISCONNECTED\"}</Button>\n                    {/*Show current tasks in the side modal*/}\n                    <TaskModal/>\n                </React.Fragment>\n            )\n    }\n}\n\nfunction StatusText({connectivityStatus, ipAddress}) {\n    if (connectivityStatus) {\n        return (\n            <p>The rclone backend is connected and working as expected.<br/>Current IP address is {ipAddress}.</p>\n        );\n    } else {\n        return (\n            <p>Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.</p>\n\n        )\n    }\n}\n\nconst propTypes = {\n    mode: PropTypes.string,\n};\n\nconst defaultProps = {\n    mode: \"card\",\n};\n\n\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected\n});\n\nexport default connect(mapStateToProps, {getStatus})(BackendStatusCard);\n"]},"metadata":{},"sourceType":"module"}