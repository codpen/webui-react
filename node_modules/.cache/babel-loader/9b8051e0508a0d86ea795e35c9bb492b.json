{"ast":null,"code":"export function isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n\n  return true;\n}\nexport default isEmpty;\nexport function bytesToMB(bytes) {\n  if (bytes === 0) return 0;\n  var mb = bytes / 1024 / 1024;\n  return mb;\n}\nexport function bpsToMbps(bps) {\n  if (bps === 0) return 0;\n  var mbps = bytesToMB(bps);\n  return mbps;\n}\nexport function formatBytes(bytes) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  if (bytes < 1) return '0 B';\n  var k = 1024;\n  var dm = decimals < 0 ? 0 : decimals;\n  var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\nexport function secondsToMinutesHourString(seconds) {\n  if (seconds === 0) {\n    return \"00:00:00 S\";\n  }\n\n  var minutes = seconds / 60;\n  seconds = seconds % 60;\n  var hours = minutes / 60;\n  minutes = minutes % 60;\n  return \"\".concat(Math.round(hours), \":\").concat(Math.round(minutes), \":\").concat(Math.round(seconds), \" hrs\");\n}\nexport function secondsToStr(seconds) {\n  // TIP: to find current time in milliseconds, use:\n  // var  current_time_milliseconds = new Date().getTime();\n  function numberEnding(number) {\n    return number > 1 ? 's' : '';\n  }\n\n  var years = Math.floor(seconds / 31536000);\n\n  if (years) {\n    return years + ' year' + numberEnding(years);\n  } //TODO: Months! Maybe weeks?\n\n\n  var days = Math.floor((seconds %= 31536000) / 86400);\n\n  if (days) {\n    return days + ' day' + numberEnding(days);\n  }\n\n  var hours = Math.floor((seconds %= 86400) / 3600);\n\n  if (hours) {\n    return hours + ' hour' + numberEnding(hours);\n  }\n\n  var minutes = Math.floor((seconds %= 3600) / 60);\n\n  if (minutes) {\n    return minutes + ' minute' + numberEnding(minutes);\n  }\n\n  seconds = seconds % 60;\n\n  if (seconds) {\n    return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n  }\n\n  return 'less than a second'; //'just now' //or other string you like;\n}\n\nfunction baseValidator(regex, str) {\n  return regex.test(str);\n}\n\nexport function validateSizeSuffix(str) {\n  var regex = /^off|([0-9]+([KMGTP]))$/g;\n  return baseValidator(regex, str);\n}\nexport function validateInt(str) {\n  var regex = /^([0-9]+)$/;\n  return baseValidator(regex, str);\n}\nexport function validateDuration(str) {\n  var regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n  return baseValidator(regex, str);\n}\nexport function openInNewTab(url) {\n  var win = window.open(url, '_blank');\n  win.focus();\n}\n/*Returns object of config if found, else returns undefined*/\n\nexport function findFromConfig(config, name) {\n  var currentConfig = config.find(function (ele, idx, array) {\n    return name === ele.Prefix;\n  });\n  return currentConfig;\n}\nexport function addColonAtLast(name) {\n  if (name.indexOf(':') === -1) {\n    if (name[name.length - 1] !== \":\") {\n      name = name + \":\";\n    }\n  }\n\n  return name;\n}","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/utils/Tools.js"],"names":["isEmpty","obj","key","hasOwnProperty","bytesToMB","bytes","mb","bpsToMbps","bps","mbps","formatBytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","secondsToMinutesHourString","seconds","minutes","hours","round","secondsToStr","numberEnding","number","years","days","baseValidator","regex","str","test","validateSizeSuffix","validateInt","validateDuration","openInNewTab","url","win","window","open","focus","findFromConfig","config","name","currentConfig","find","ele","idx","array","Prefix","addColonAtLast","indexOf","length"],"mappings":"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","sourcesContent":["export function isEmpty(obj) {\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\nexport default isEmpty;\n\nexport function bytesToMB(bytes) {\n    if (bytes === 0) return 0;\n    const mb = bytes / 1024 / 1024;\n\n    return mb;\n}\n\nexport function bpsToMbps(bps) {\n    if (bps === 0) return 0;\n    const mbps = bytesToMB(bps);\n    return mbps;\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n    if (bytes < 1) return '0 B';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function secondsToMinutesHourString(seconds) {\n    if (seconds === 0) {\n        return `00:00:00 S`;\n    }\n    let minutes = seconds / 60;\n    seconds = seconds % 60;\n    let hours = minutes / 60;\n    minutes = minutes % 60;\n\n    return `${Math.round(hours)}:${Math.round(minutes)}:${Math.round(seconds)} hrs`;\n}\n\nexport function secondsToStr(seconds) {\n    // TIP: to find current time in milliseconds, use:\n    // var  current_time_milliseconds = new Date().getTime();\n\n    function numberEnding(number) {\n        return (number > 1) ? 's' : '';\n    }\n\n    let years = Math.floor(seconds / 31536000);\n    if (years) {\n        return years + ' year' + numberEnding(years);\n    }\n    //TODO: Months! Maybe weeks?\n    let days = Math.floor((seconds %= 31536000) / 86400);\n    if (days) {\n        return days + ' day' + numberEnding(days);\n    }\n    let hours = Math.floor((seconds %= 86400) / 3600);\n    if (hours) {\n        return hours + ' hour' + numberEnding(hours);\n    }\n    let minutes = Math.floor((seconds %= 3600) / 60);\n    if (minutes) {\n        return minutes + ' minute' + numberEnding(minutes);\n    }\n    seconds = seconds % 60;\n    if (seconds) {\n        return seconds.toFixed(2) + ' second' + numberEnding(seconds);\n    }\n    return 'less than a second'; //'just now' //or other string you like;\n}\n\nfunction baseValidator(regex, str) {\n\n    return regex.test(str);\n}\n\n\nexport function validateSizeSuffix(str) {\n    const regex = /^off|([0-9]+([KMGTP]))$/g;\n\n    return baseValidator(regex, str);\n}\n\nexport function validateInt(str) {\n    const regex = /^([0-9]+)$/;\n    return baseValidator(regex, str);\n}\n\nexport function validateDuration(str) {\n    const regex = /^(\\d+[h])?(\\d+[m])?(\\d+[s])?(\\d+ms)??$/i;\n    return baseValidator(regex, str);\n}\n\nexport function openInNewTab(url) {\n    let win = window.open(url, '_blank');\n    win.focus();\n}\n\n/*Returns object of config if found, else returns undefined*/\nexport function findFromConfig(config, name) {\n    const currentConfig = config.find((ele, idx, array) => {\n        return (name === ele.Prefix);\n    });\n    return currentConfig;\n}\n\nexport function addColonAtLast(name) {\n    if (name.indexOf(':') === -1) {\n        if (name[name.length - 1] !== \":\") {\n            name = name + \":\"\n        }\n    }\n\n    return name;\n}\n\n"]},"metadata":{},"sourceType":"module"}