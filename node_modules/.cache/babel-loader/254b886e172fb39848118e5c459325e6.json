{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/RemotesList/RemoteListAutoSuggest.js\";\nimport Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(config, value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length; // console.log(\"config getSuggestions\", config, inputValue);\n\n  return inputLength === 0 ? [] : config.filter(function (lang) {\n    return lang.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion;\n}; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, suggestion);\n};\n\nvar RemoteListAutoSuggest =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RemoteListAutoSuggest, _React$Component);\n\n  function RemoteListAutoSuggest(props) {\n    var _this;\n\n    _classCallCheck(this, RemoteListAutoSuggest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RemoteListAutoSuggest).call(this, props)); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _this.onSuggestionsFetchRequested = function (_ref) {\n      var value = _ref.value;\n\n      // console.log(value);\n      _this.setState({\n        suggestions: getSuggestions(_this.props.suggestions, value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.state = {\n      suggestions: []\n    };\n    return _this;\n  } // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n\n  _createClass(RemoteListAutoSuggest, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onChange = _this$props.onChange; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: 'Type the name of remote you want to open',\n        value: value,\n        onChange: onChange\n      }; // Finally, render it!\n\n      return React.createElement(Autosuggest, {\n        suggestions: this.state.suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RemoteListAutoSuggest;\n}(React.Component);\n\nRemoteListAutoSuggest.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  suggestions: PropTypes.array.isRequired\n};\nexport default RemoteListAutoSuggest;","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/RemotesList/RemoteListAutoSuggest.js"],"names":["Autosuggest","React","PropTypes","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","RemoteListAutoSuggest","props","onSuggestionsFetchRequested","setState","suggestions","onSuggestionsClearRequested","state","onChange","inputProps","placeholder","Component","propTypes","string","isRequired","func","array"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,KAAT,EAAmB;AACtC,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,MAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B,CAFsC,CAItC;;AAEA,SAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBL,MAAM,CAACO,MAAP,CAAc,UAAAC,IAAI;AAAA,WAC9CA,IAAI,CAACJ,WAAL,GAAmBK,KAAnB,CAAyB,CAAzB,EAA4BJ,WAA5B,MAA6CH,UADC;AAAA,GAAlB,CAAhC;AAGH,CATD,C,CAWA;AACA;AACA;;;AACA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,UAAU;AAAA,SAAIA,UAAJ;AAAA,CAArC,C,CAEA;;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAD,UAAU;AAAA,SAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,UADL,CAD+B;AAAA,CAAnC;;IAMME,qB;;;;;AACF,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+FAAMA,KAAN,GADe,CAGf;AACA;AACA;AACA;AACA;;AAPe,UAgBnBC,2BAhBmB,GAgBW,gBAAa;AAAA,UAAXd,KAAW,QAAXA,KAAW;;AACvC;AACA,YAAKe,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAElB,cAAc,CAAC,MAAKe,KAAL,CAAWG,WAAZ,EAAyBhB,KAAzB;AADjB,OAAd;AAGH,KArBkB;;AAAA,UAwBnBiB,2BAxBmB,GAwBW,YAAM;AAChC,YAAKF,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KA5BkB;;AAQf,UAAKE,KAAL,GAAa;AACTF,MAAAA,WAAW,EAAE;AADJ,KAAb;AARe;AAWlB,G,CAGD;AACA;;;;;6BAeS;AAAA,wBACqB,KAAKH,KAD1B;AAAA,UACEb,KADF,eACEA,KADF;AAAA,UACSmB,QADT,eACSA,QADT,EAIL;;AACA,UAAMC,UAAU,GAAG;AACfC,QAAAA,WAAW,EAAE,0CADE;AAEfrB,QAAAA,KAAK,EAAEA,KAFQ;AAGfmB,QAAAA,QAAQ,EAAEA;AAHK,OAAnB,CALK,CAWL;;AACA,aACI,oBAAC,WAAD;AACI,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWF,WAD5B;AAEI,QAAA,2BAA2B,EAAE,KAAKF,2BAFtC;AAGI,QAAA,2BAA2B,EAAE,KAAKG,2BAHtC;AAII,QAAA,kBAAkB,EAAER,kBAJxB;AAKI,QAAA,gBAAgB,EAAEE,gBALtB;AAMI,QAAA,UAAU,EAAES,UANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUH;;;;EArD+BxB,KAAK,CAAC0B,S;;AAwD1CV,qBAAqB,CAACW,SAAtB,GAAkC;AAC9BvB,EAAAA,KAAK,EAAEH,SAAS,CAAC2B,MAAV,CAAiBC,UADM;AAE9BN,EAAAA,QAAQ,EAAEtB,SAAS,CAAC6B,IAAV,CAAeD,UAFK;AAG9BT,EAAAA,WAAW,EAAEnB,SAAS,CAAC8B,KAAV,CAAgBF;AAHC,CAAlC;AAMA,eAAeb,qBAAf","sourcesContent":["import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    // console.log(\"config getSuggestions\", config, inputValue);\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;"]},"metadata":{},"sourceType":"module"}