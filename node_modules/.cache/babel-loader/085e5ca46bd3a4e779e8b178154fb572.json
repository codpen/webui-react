{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/RemoteExplorer/RemoteExplorer.js\";\nimport React from 'react';\nimport \"../../utils/Global\";\nimport { Button, Card, CardBody, CardHeader, Col, Form, Row } from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport BackStack from \"../../utils/BackStack\";\nimport ScrollableDiv from \"../Base/ScrollableDiv/ScrollableDiv\";\nimport RemoteExplorerContext from \"./RemoteExplorerContext\";\nimport { addColonAtLast } from \"../../utils/Tools\";\nimport { connect } from \"react-redux\";\nimport { getConfigForRemote } from \"../../actions/explorerActions\";\nvar propTypes = {};\nvar defaultProps = {};\n\nvar RemoteExplorer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RemoteExplorer, _React$Component);\n\n  function RemoteExplorer(props) {\n    var _this;\n\n    _classCallCheck(this, RemoteExplorer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RemoteExplorer).call(this, props));\n\n    _this.openRemote = function () {\n      var _this$state = _this.state,\n          backStack = _this$state.backStack,\n          remoteNameTemp = _this$state.remoteNameTemp;\n      backStack.empty();\n      backStack.push({\n        remoteName: remoteNameTemp,\n        remotePath: \"\"\n      });\n\n      _this.setState(backStack.peek());\n\n      _this.getFsInfo(remoteNameTemp);\n    };\n\n    _this.state = {\n      backStack: new BackStack(),\n      remoteName: \"\",\n      remotePath: \"\",\n      remoteNameTemp: \"\"\n    };\n\n    _this.state.backStack.push({\n      remoteName: \"\",\n      remotePath: \"\"\n    });\n\n    _this.updateRemoteName = _this.updateRemoteName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateRemotePath = _this.updateRemotePath.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.buttonUpPressed = _this.buttonUpPressed.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(RemoteExplorer, [{\n    key: \"getFsInfo\",\n    value: function getFsInfo(remoteName) {\n      if (!this.props.configs[remoteName]) this.props.getConfigForRemote(remoteName);\n    }\n  }, {\n    key: \"updateRemoteName\",\n    value: function updateRemoteName(remoteName) {\n      this.setState({\n        remoteNameTemp: remoteName\n      });\n    }\n  }, {\n    key: \"updateRemotePath\",\n    value: function updateRemotePath(remotePath, IsDir, IsBucket) {\n      var backStack = this.state.backStack;\n\n      if (IsBucket) {\n        backStack.push({\n          remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath,\n          remotePath: \"\"\n        });\n      } else if (IsDir) {\n        backStack.push({\n          remoteName: backStack.peek().remoteName,\n          remotePath: remotePath\n        });\n      } // console.log(backStack.peek());\n\n\n      this.setState(backStack.peek());\n    }\n  }, {\n    key: \"buttonUpPressed\",\n    value: function buttonUpPressed() {\n      var backStack = this.state.backStack;\n\n      if (backStack.getLength() > 1) {\n        backStack.pop();\n        this.setState(backStack.peek());\n      }\n    } // updateHandle = () => {\n    //     console.log(\"componentShouldUpdate\");\n    //     this.setState({componentShouldUpdate: true});\n    // };\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevState.componentShouldUpdate) {\n        this.setState({\n          componentShouldUpdate: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state$backStack = this.state.backStack.peek(),\n          remoteName = _this$state$backStack.remoteName,\n          remotePath = _this$state$backStack.remotePath;\n\n      var fsInfo = this.props.configs[remoteName];\n      return React.createElement(RemoteExplorerContext.Provider, {\n        value: {\n          remoteName: remoteName,\n          remotePath: remotePath,\n          fsInfo: fsInfo\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Remotes\"), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: function onSubmit() {\n          return _this2.openRemote();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        sm: 8,\n        lg: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(RemotesList, {\n        updateRemoteNameHandle: this.updateRemoteName,\n        remoteName: remoteName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 12,\n        sm: 2,\n        lg: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-lg\",\n        color: \"success\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Open\")))))), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Files: \", remoteName), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(ScrollableDiv, {\n        height: \"700px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(FilesView, {\n        remoteName: remoteName,\n        remotePath: remotePath,\n        updateRemotePathHandle: this.updateRemotePath,\n        upButtonHandle: this.buttonUpPressed,\n        componentShouldUpdate: this.state.componentShouldUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return RemoteExplorer;\n}(React.Component);\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    configs: state.remote.configs,\n    hasError: state.remote.hasError,\n    error: state.remote.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getConfigForRemote: getConfigForRemote\n})(RemoteExplorer);","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/RemoteExplorer/RemoteExplorer.js"],"names":["React","Button","Card","CardBody","CardHeader","Col","Form","Row","RemotesList","FilesView","BackStack","ScrollableDiv","RemoteExplorerContext","addColonAtLast","connect","getConfigForRemote","propTypes","defaultProps","RemoteExplorer","props","openRemote","state","backStack","remoteNameTemp","empty","push","remoteName","remotePath","setState","peek","getFsInfo","updateRemoteName","bind","updateRemotePath","buttonUpPressed","configs","IsDir","IsBucket","getLength","pop","prevProps","prevState","snapshot","componentShouldUpdate","fsInfo","Component","mapStateToProps","remote","hasError","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"../../utils/Global\";\nimport {Button, Card, CardBody, CardHeader, Col, Form, Row} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport BackStack from \"../../utils/BackStack\";\nimport ScrollableDiv from \"../Base/ScrollableDiv/ScrollableDiv\";\nimport RemoteExplorerContext from \"./RemoteExplorerContext\";\nimport {addColonAtLast} from \"../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getConfigForRemote} from \"../../actions/explorerActions\";\n\n\nconst propTypes = {};\n\nconst defaultProps = {};\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            backStack: new BackStack(),\n            remoteName: \"\",\n            remotePath: \"\",\n            remoteNameTemp: \"\"\n\n        };\n\n        this.state.backStack.push({remoteName: \"\", remotePath: \"\"});\n\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n        this.buttonUpPressed = this.buttonUpPressed.bind(this);\n\n    }\n\n    getFsInfo(remoteName) {\n\n        if (!this.props.configs[remoteName])\n            this.props.getConfigForRemote(remoteName);\n\n    }\n\n    updateRemoteName(remoteName) {\n\n        this.setState({remoteNameTemp: remoteName});\n\n    }\n\n    openRemote = () => {\n        const {backStack, remoteNameTemp} = this.state;\n        backStack.empty();\n        backStack.push({remoteName: remoteNameTemp, remotePath: \"\"});\n        this.setState(backStack.peek());\n        this.getFsInfo(remoteNameTemp)\n\n    };\n\n    updateRemotePath(remotePath, IsDir, IsBucket) {\n        const {backStack} = this.state;\n\n        if (IsBucket) {\n            backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n        } else if (IsDir) {\n            backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n\n        // console.log(backStack.peek());\n\n        this.setState(backStack.peek());\n    }\n\n    buttonUpPressed() {\n        const {backStack} = this.state;\n        if (backStack.getLength() > 1) {\n            backStack.pop();\n\n            this.setState(backStack.peek());\n        }\n    }\n\n    // updateHandle = () => {\n    //     console.log(\"componentShouldUpdate\");\n    //     this.setState({componentShouldUpdate: true});\n    // };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.componentShouldUpdate) {\n            this.setState({componentShouldUpdate: false});\n\n        }\n    }\n\n\n    render() {\n        const {remoteName, remotePath} = this.state.backStack.peek();\n        const fsInfo = this.props.configs[remoteName];\n        return (\n            <RemoteExplorerContext.Provider\n                value={{remoteName: remoteName, remotePath: remotePath, fsInfo: fsInfo}}>\n                {/*Render remotes array*/}\n\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n                        <Form onSubmit={() => this.openRemote()}>\n                            <Row>\n                                <Col xs={12} sm={8} lg={6}>\n\n                                    <RemotesList updateRemoteNameHandle={this.updateRemoteName}\n                                                 remoteName={remoteName}/>\n                                </Col>\n                                <Col xs={12} sm={2} lg={2}>\n\n                                    <Button className={\"btn-lg\"} color=\"success\"\n                                            type=\"submit\">Open</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </CardBody>\n                </Card>\n\n                {/*Render the files in the selected remote*/}\n                <Card>\n                    <CardHeader>\n                        Files: {remoteName}\n                    </CardHeader>\n                    <CardBody>\n                        <ScrollableDiv height={\"700px\"}>\n                            {/*<Row className={\"mr-0 ml-0\"}>*/}\n                                <FilesView remoteName={remoteName} remotePath={remotePath}\n                                           updateRemotePathHandle={this.updateRemotePath}\n                                           upButtonHandle={this.buttonUpPressed}\n                                           componentShouldUpdate={this.state.componentShouldUpdate}\n                                />\n                            {/*</Row>*/}\n                        </ScrollableDiv>\n                    </CardBody>\n                </Card>\n            </RemoteExplorerContext.Provider>\n        );\n    }\n\n}\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    configs: state.remote.configs,\n    hasError: state.remote.hasError,\n    error: state.remote.error\n});\n\nexport default connect(\n    mapStateToProps,\n    {getConfigForRemote}\n)(RemoteExplorer);\n"]},"metadata":{},"sourceType":"module"}