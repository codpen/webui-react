{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/RemotesList/RemotesList.js\";\nimport React from 'react';\nimport \"../../utils/Global\";\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport { connect } from \"react-redux\";\nimport { getRemoteNames } from \"../../actions/explorerActions\";\n\nvar RemotesList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RemotesList, _React$Component);\n\n  function RemotesList(props) {\n    var _this;\n\n    _classCallCheck(this, RemotesList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RemotesList).call(this, props));\n\n    _this.shouldUpdateRemoteName = function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this.setState({\n        remoteName: newValue\n      });\n\n      var updateRemoteNameHandle = _this.props.updateRemoteNameHandle;\n\n      if (_this.props.remotes.indexOf(newValue) !== -1) {\n        updateRemoteNameHandle(newValue);\n      }\n    };\n\n    _this.state = {\n      isEmpty: false,\n      remoteName: props.remoteName\n    };\n    return _this;\n  }\n\n  _createClass(RemotesList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // if(this.props.remotes.length < 1 || this.props.hasError)\n      this.props.getRemoteNames();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isEmpty = _this$state.isEmpty,\n          remoteName = _this$state.remoteName;\n      var remotes = this.props.remotes; // const {updateRemoteNameHandle} = this.props;\n\n      if (isEmpty) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"Add some remotes to see them here \", React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"sheep\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"\\uD83D\\uDC11\"), \".\");\n      } else {\n        return React.createElement(RemoteListAutoSuggest, {\n          value: remoteName,\n          onChange: this.shouldUpdateRemoteName,\n          suggestions: remotes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return RemotesList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    remotes: state.remote.remotes,\n    hasError: state.remote.hasError,\n    error: state.remote.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getRemoteNames: getRemoteNames\n})(RemotesList);","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/RemotesList/RemotesList.js"],"names":["React","RemoteListAutoSuggest","connect","getRemoteNames","RemotesList","props","shouldUpdateRemoteName","event","newValue","setState","remoteName","updateRemoteNameHandle","remotes","indexOf","state","isEmpty","Component","mapStateToProps","remote","hasError","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,cAAR,QAA6B,+BAA7B;;IAEMC,W;;;;;AAEF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;;AADe,UAanBC,sBAbmB,GAaM,UAACC,KAAD,QAAuB;AAAA,UAAdC,QAAc,QAAdA,QAAc;;AAC5C,YAAKC,QAAL,CAAc;AAACC,QAAAA,UAAU,EAAEF;AAAb,OAAd;;AAD4C,UAGrCG,sBAHqC,GAGX,MAAKN,KAHM,CAGrCM,sBAHqC;;AAI5C,UAAI,MAAKN,KAAL,CAAWO,OAAX,CAAmBC,OAAnB,CAA2BL,QAA3B,MAAyC,CAAC,CAA9C,EAAiD;AAC7CG,QAAAA,sBAAsB,CAACH,QAAD,CAAtB;AACH;AACJ,KApBkB;;AAEf,UAAKM,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KADA;AAETL,MAAAA,UAAU,EAAEL,KAAK,CAACK;AAFT,KAAb;AAFe;AAMlB;;;;wCAEmB;AAChB;AACA,WAAKL,KAAL,CAAWF,cAAX;AACH;;;6BAYQ;AAAA,wBACyB,KAAKW,KAD9B;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UACWL,UADX,eACWA,UADX;AAAA,UAEEE,OAFF,GAEa,KAAKP,KAFlB,CAEEO,OAFF,EAGL;;AAEA,UAAIG,OAAJ,EAAa;AACT,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACsC;AAAM,UAAA,IAAI,EAAC,KAAX;AAAiB,wBAAW,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADtC,MADJ;AAIH,OALD,MAKO;AAEH,eAEI,oBAAC,qBAAD;AAAuB,UAAA,KAAK,EAAEL,UAA9B;AAA0C,UAAA,QAAQ,EAAE,KAAKJ,sBAAzD;AACuB,UAAA,WAAW,EAAEM,OADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAKH;AACJ;;;;EA3CqBZ,KAAK,CAACgB,S;;AA8ChC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAH,KAAK;AAAA,SAAK;AAC9BF,IAAAA,OAAO,EAAEE,KAAK,CAACI,MAAN,CAAaN,OADQ;AAE9BO,IAAAA,QAAQ,EAAEL,KAAK,CAACI,MAAN,CAAaC,QAFO;AAG9BC,IAAAA,KAAK,EAAEN,KAAK,CAACI,MAAN,CAAaE;AAHU,GAAL;AAAA,CAA7B;;AAMA,eAAelB,OAAO,CAACe,eAAD,EAAkB;AAACd,EAAAA,cAAc,EAAdA;AAAD,CAAlB,CAAP,CAA2CC,WAA3C,CAAf","sourcesContent":["import React from 'react';\nimport \"../../utils/Global\";\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getRemoteNames} from \"../../actions/explorerActions\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName\n        };\n    }\n\n    componentDidMount() {\n        // if(this.props.remotes.length < 1 || this.props.hasError)\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        this.setState({remoteName: newValue});\n\n        const {updateRemoteNameHandle} = this.props;\n        if (this.props.remotes.indexOf(newValue) !== -1) {\n            updateRemoteNameHandle(newValue);\n        }\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">üêë</span>.\n                </div>);\n        } else {\n\n            return (\n\n                <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                       suggestions={remotes}/>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    remotes: state.remote.remotes,\n    hasError: state.remote.hasError,\n    error: state.remote.error\n});\n\nexport default connect(mapStateToProps, {getRemoteNames})(RemotesList);\n"]},"metadata":{},"sourceType":"module"}