{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/ShowConfig/ConfigRow.js\";\nimport React from \"react\";\nimport axiosInstance from \"../../utils/API\";\nimport { Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nvar propTypes = {\n  remote: PropTypes.object.isRequired,\n  // Name of the remote to perform operations\n  refreshHandle: PropTypes.func.isRequired // Used to refresh the parent component upon change\n\n};\n\nvar ConfigRow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConfigRow, _React$Component);\n\n  function ConfigRow(props, context) {\n    var _this;\n\n    _classCallCheck(this, ConfigRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfigRow).call(this, props, context));\n    var _this$props = _this.props,\n        remote = _this$props.remote,\n        remoteName = _this$props.remoteName;\n    remote[\"name\"] = remoteName;\n    _this.state = {\n      remote: remote\n    };\n    _this.onDeleteClicked = _this.onDeleteClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUpdateClicked = _this.onUpdateClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // TODO: Update config functionality\n\n\n  _createClass(ConfigRow, [{\n    key: \"onUpdateClicked\",\n    value: function onUpdateClicked() {\n      console.log(\"Update Clicked\");\n    } // TODO: Delete config functionality\n\n  }, {\n    key: \"onDeleteClicked\",\n    value: function onDeleteClicked() {\n      var name = this.state.remote.name;\n      var refreshHandle = this.props.refreshHandle; // Delete http request\n\n      if (window.confirm(\"Are you sure you wish to delete \".concat(name, \"? You cannot restore it once it is deleted.\"))) {\n        axiosInstance.post(\"/config/delete\", {\n          name: name\n        }).then(function (res) {\n          console.log(res); // Refresh the parent component\n\n          refreshHandle();\n        }, function (err) {\n          console.log(\"Error occurred: \".concat(err));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$remote = this.state.remote,\n          name = _this$state$remote.name,\n          type = _this$state$remote.type;\n      var sequenceNumber = this.props.sequenceNumber;\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, sequenceNumber), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, type), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"bg-info\",\n        onClick: this.onUpdateClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Update\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"bg-danger\",\n        onClick: this.onDeleteClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Delete\")));\n    }\n  }]);\n\n  return ConfigRow;\n}(React.Component);\n\nConfigRow.propTypes = propTypes;\nexport default ConfigRow;","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/ShowConfig/ConfigRow.js"],"names":["React","axiosInstance","Button","PropTypes","propTypes","remote","object","isRequired","refreshHandle","func","ConfigRow","props","context","remoteName","state","onDeleteClicked","bind","onUpdateClicked","console","log","name","window","confirm","post","then","res","err","type","sequenceNumber","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,MAAM,EAAEF,SAAS,CAACG,MAAV,CAAiBC,UADX;AACuB;AACrCC,EAAAA,aAAa,EAAEL,SAAS,CAACM,IAAV,CAAeF,UAFhB,CAE2B;;AAF3B,CAAlB;;IAKMG,S;;;;;AACF,qBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AACxB,mFAAMD,KAAN,EAAaC,OAAb;AADwB,sBAEG,MAAKD,KAFR;AAAA,QAEnBN,MAFmB,eAEnBA,MAFmB;AAAA,QAEXQ,UAFW,eAEXA,UAFW;AAGxBR,IAAAA,MAAM,CAAC,MAAD,CAAN,GAAiBQ,UAAjB;AACA,UAAKC,KAAL,GAAa;AACTT,MAAAA,MAAM,EAAEA;AADC,KAAb;AAGA,UAAKU,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,uDAAvB;AARwB;AAU3B,G,CAGD;;;;;sCACkB;AACdE,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,K,CAED;;;;sCACkB;AAAA,UACPC,IADO,GACC,KAAKN,KAAL,CAAWT,MADZ,CACPe,IADO;AAAA,UAETZ,aAFS,GAEQ,KAAKG,KAFb,CAETH,aAFS,EAId;;AACA,UAAIa,MAAM,CAACC,OAAP,2CAAkDF,IAAlD,iDAAJ,EAA0G;AAEtGnB,QAAAA,aAAa,CAACsB,IAAd,CAAmB,gBAAnB,EAAqC;AAACH,UAAAA,IAAI,EAAEA;AAAP,SAArC,EAAmDI,IAAnD,CACI,UAACC,GAAD,EAAS;AACLP,UAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ,EADK,CAEL;;AACAjB,UAAAA,aAAa;AAChB,SALL,EAKO,UAACkB,GAAD,EAAS;AACRR,UAAAA,OAAO,CAACC,GAAR,2BAA+BO,GAA/B;AACH,SAPL;AASH;AACJ;;;6BAGQ;AAAA,+BACgB,KAAKZ,KAAL,CAAWT,MAD3B;AAAA,UACEe,IADF,sBACEA,IADF;AAAA,UACQO,IADR,sBACQA,IADR;AAAA,UAEEC,cAFF,GAEoB,KAAKjB,KAFzB,CAEEiB,cAFF;AAGL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiBA,cAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKR,IAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKO,IAAL,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE,SAAnB;AAA8B,QAAA,OAAO,EAAE,KAAKV,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE,WAAnB;AAAgC,QAAA,OAAO,EAAE,KAAKF,eAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,CALJ,CADJ;AASH;;;;EApDmBf,KAAK,CAAC6B,S;;AAuD9BnB,SAAS,CAACN,SAAV,GAAsBA,SAAtB;AAEA,eAAeM,SAAf","sourcesContent":["import React from \"react\";\nimport axiosInstance from \"../../utils/API\";\nimport {Button} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n    remote: PropTypes.object.isRequired, // Name of the remote to perform operations\n    refreshHandle: PropTypes.func.isRequired // Used to refresh the parent component upon change\n};\n\nclass ConfigRow extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        let {remote, remoteName} = this.props;\n        remote[\"name\"] = remoteName;\n        this.state = {\n            remote: remote\n        };\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\n        this.onUpdateClicked = this.onUpdateClicked.bind(this);\n\n    }\n\n\n    // TODO: Update config functionality\n    onUpdateClicked() {\n        console.log(\"Update Clicked\")\n    }\n\n    // TODO: Delete config functionality\n    onDeleteClicked() {\n        const {name} = this.state.remote;\n        let {refreshHandle} = this.props;\n\n        // Delete http request\n        if (window.confirm(`Are you sure you wish to delete ${name}? You cannot restore it once it is deleted.`)) {\n\n            axiosInstance.post(\"/config/delete\", {name: name}).then(\n                (res) => {\n                    console.log(res);\n                    // Refresh the parent component\n                    refreshHandle();\n                }, (err) => {\n                    console.log(`Error occurred: ${err}`);\n                }\n            )\n        }\n    }\n\n\n    render() {\n        const {name, type} = this.state.remote;\n        const {sequenceNumber} = this.props;\n        return (\n            <tr>\n                <th scope=\"row\">{sequenceNumber}</th>\n                <td>{name}</td>\n                <td>{type}</td>\n                <td><Button className={\"bg-info\"} onClick={this.onUpdateClicked}>Update</Button></td>\n                <td><Button className={\"bg-danger\"} onClick={this.onDeleteClicked}>Delete</Button></td>\n            </tr>\n        );\n    }\n}\n\nConfigRow.propTypes = propTypes;\n\nexport default ConfigRow;"]},"metadata":{},"sourceType":"module"}