{"ast":null,"code":"import _objectSpread from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_CONFIG_FOR_REMOTE, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS } from \"../actions/types\";\nvar initialState = {\n  configs: {},\n  remotes: [],\n  hasError: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_CONFIG_FOR_REMOTE:\n      if (action.status === REQUEST_SUCCESS) return _objectSpread({}, state, {\n        configs: _objectSpread({}, state.configs, action.payload),\n        hasError: false\n      });\n      if (action.status === REQUEST_ERROR) return _objectSpread({}, state, {\n        error: action.payload,\n        hasError: true\n      });\n      break;\n\n    case GET_REMOTE_LIST:\n      if (action.status === REQUEST_SUCCESS) return _objectSpread({}, state, {\n        remotes: action.payload,\n        hasError: false\n      });\n      if (action.status === REQUEST_ERROR) return _objectSpread({}, state, {\n        error: action.payload,\n        hasError: true\n      });\n      break;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/reducers/explorerReducer.js"],"names":["GET_CONFIG_FOR_REMOTE","GET_REMOTE_LIST","REQUEST_ERROR","REQUEST_SUCCESS","initialState","configs","remotes","hasError","state","action","type","status","payload","error"],"mappings":";AAAA,SAAQA,qBAAR,EAA+BC,eAA/B,EAAgDC,aAAhD,EAA+DC,eAA/D,QAAqF,kBAArF;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAArB;AAMA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,qBAAL;AACI,UAAIS,MAAM,CAACE,MAAP,KAAkBR,eAAtB,EACI,yBACOK,KADP;AAEIH,QAAAA,OAAO,oBAAMG,KAAK,CAACH,OAAZ,EAAwBI,MAAM,CAACG,OAA/B,CAFX;AAGIL,QAAAA,QAAQ,EAAE;AAHd;AAKJ,UAAIE,MAAM,CAACE,MAAP,KAAkBT,aAAtB,EACI,yBACOM,KADP;AAEIK,QAAAA,KAAK,EAAEJ,MAAM,CAACG,OAFlB;AAGIL,QAAAA,QAAQ,EAAE;AAHd;AAMJ;;AACJ,SAAKN,eAAL;AACI,UAAIQ,MAAM,CAACE,MAAP,KAAkBR,eAAtB,EACI,yBACOK,KADP;AAEIF,QAAAA,OAAO,EAAEG,MAAM,CAACG,OAFpB;AAGIL,QAAAA,QAAQ,EAAE;AAHd;AAKJ,UAAIE,MAAM,CAACE,MAAP,KAAkBT,aAAtB,EACI,yBACOM,KADP;AAEIK,QAAAA,KAAK,EAAEJ,MAAM,CAACG,OAFlB;AAGIL,QAAAA,QAAQ,EAAE;AAHd;AAKJ;;AACJ;AACI,aAAOC,KAAP;AA/BR;AAkCH","sourcesContent":["import {GET_CONFIG_FOR_REMOTE, GET_REMOTE_LIST, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\nconst initialState = {\n    configs: {},\n    remotes: [],\n    hasError: false\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_CONFIG_FOR_REMOTE:\n            if (action.status === REQUEST_SUCCESS)\n                return {\n                    ...state,\n                    configs: {...state.configs, ...action.payload},\n                    hasError: false\n                };\n            if (action.status === REQUEST_ERROR)\n                return {\n                    ...state,\n                    error: action.payload,\n                    hasError: true\n\n                };\n            break;\n        case GET_REMOTE_LIST:\n            if (action.status === REQUEST_SUCCESS)\n                return {\n                    ...state,\n                    remotes: action.payload,\n                    hasError: false\n                };\n            if (action.status === REQUEST_ERROR)\n                return {\n                    ...state,\n                    error: action.payload,\n                    hasError: true\n                };\n            break;\n        default:\n            return state;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}