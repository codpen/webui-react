{"ast":null,"code":"import axiosInstance from \"../utils/API\";\nimport { GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS } from \"./types\";\nexport var getProviders = function getProviders() {\n  return function (dispatch) {\n    axiosInstance.post(\"/config/providers\").then(function (res) {\n      return dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n      });\n    });\n  };\n};\nexport var getConfigDump = function getConfigDump() {\n  return function (dispatch) {\n    axiosInstance.post(\"/config/dump\").then(function (res) {\n      return dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n      });\n    }, function (error) {\n      return dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/actions/configActions.js"],"names":["axiosInstance","GET_CONFIG_DUMP","GET_PROVIDERS","REQUEST_ERROR","REQUEST_SUCCESS","getProviders","dispatch","post","then","res","type","payload","data","providers","getConfigDump","status","error"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,cAA1B;AACA,SAAQC,eAAR,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,eAAvD,QAA6E,SAA7E;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC1CN,IAAAA,aAAa,CAACO,IAAd,CAAmB,mBAAnB,EAAwCC,IAAxC,CAA6C,UAAAC,GAAG;AAAA,aAAIH,QAAQ,CAAC;AACzDI,QAAAA,IAAI,EAAER,aADmD;AAEzDS,QAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASC;AAFuC,OAAD,CAAZ;AAAA,KAAhD;AAIH,GAL2B;AAAA,CAArB;AAOP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,UAAAR,QAAQ,EAAI;AAC3CN,IAAAA,aAAa,CAACO,IAAd,CAAmB,cAAnB,EAAmCC,IAAnC,CAAwC,UAAAC,GAAG;AAAA,aAAIH,QAAQ,CAAC;AACpDI,QAAAA,IAAI,EAAET,eAD8C;AAEpDc,QAAAA,MAAM,EAAEX,eAF4C;AAGpDO,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAHuC,OAAD,CAAZ;AAAA,KAA3C,EAII,UAAAI,KAAK;AAAA,aAAIV,QAAQ,CAAC;AAClBI,QAAAA,IAAI,EAAET,eADY;AAElBc,QAAAA,MAAM,EAAEZ,aAFU;AAGlBQ,QAAAA,OAAO,EAAEK;AAHS,OAAD,CAAZ;AAAA,KAJT;AASH,GAV4B;AAAA,CAAtB","sourcesContent":["import axiosInstance from \"../utils/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\n\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(\"/config/providers\").then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(\"/config/dump\").then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};"]},"metadata":{},"sourceType":"module"}