{"ast":null,"code":"import _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/NewDrive/ProviderAutoSuggest.js\";\nimport Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport { findFromConfig } from \"../../utils/Tools\"; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(config, value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length; // console.log(\"config getSuggestions\", config, inputValue);\n\n  if (inputLength === 0) {\n    return config;\n  }\n\n  return inputLength === 0 ? [] : config.filter(function (lang) {\n    return lang.Description.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.Prefix;\n}; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, suggestion.Description);\n};\n\nvar ProviderAutoSuggest =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProviderAutoSuggest, _React$Component);\n\n  function ProviderAutoSuggest(props) {\n    var _this;\n\n    _classCallCheck(this, ProviderAutoSuggest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProviderAutoSuggest).call(this, props)); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _this.onSuggestionsFetchRequested = function (_ref) {\n      var value = _ref.value;\n\n      // console.log(value);\n      _this.setState({\n        suggestions: getSuggestions(_this.props.suggestions, value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.state = {\n      suggestions: []\n    };\n    return _this;\n  } // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n\n  _createClass(ProviderAutoSuggest, [{\n    key: \"shouldRenderSuggestions\",\n    value: function shouldRenderSuggestions(value) {\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          suggestions = _this$props.suggestions;\n      var currentConfig = findFromConfig(suggestions, value);\n      var renderVal = \"\";\n\n      if (currentConfig === undefined) {\n        renderVal = value;\n      } else {\n        renderVal = currentConfig.Description;\n      } // Autosuggest will pass through all these props to the input.\n\n\n      var inputProps = {\n        placeholder: 'Type a provider type',\n        value: renderVal,\n        onChange: onChange\n      }; // Finally, render it!\n\n      return React.createElement(Autosuggest, {\n        suggestions: this.state.suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        alwaysRenderSuggestions: true,\n        highlightFirstSuggestion: true,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ProviderAutoSuggest;\n}(React.Component);\n\nexport default ProviderAutoSuggest;","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/NewDrive/ProviderAutoSuggest.js"],"names":["Autosuggest","React","findFromConfig","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","props","onSuggestionsFetchRequested","setState","suggestions","onSuggestionsClearRequested","state","onChange","currentConfig","renderVal","undefined","inputProps","placeholder","Component"],"mappings":"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","sourcesContent":["import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    // console.log(\"config getSuggestions\", config, inputValue);\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    shouldRenderSuggestions(value) {\n        return true;\n    }\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;"]},"metadata":{},"sourceType":"module"}