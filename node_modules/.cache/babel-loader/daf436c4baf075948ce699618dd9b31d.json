{"ast":null,"code":"import _slicedToArray from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/NewDrive/NewDrive.js\";\nimport React from 'react';\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Collapse, Form, FormFeedback, FormGroup, Input, Label } from \"reactstrap\"; // import {config} from \"./config.js\";\n\nimport NewDriveAuthModal from \"../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../utils/API\";\nimport isEmpty, { findFromConfig, validateDuration, validateInt, validateSizeSuffix } from \"../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from 'prop-types';\nimport { getProviders } from \"../../actions/configActions\";\nimport { connect } from \"react-redux\";\n\nfunction DriveParameters(_ref) {\n  var drivePrefix = _ref.drivePrefix,\n      loadAdvanced = _ref.loadAdvanced,\n      changeHandler = _ref.changeHandler,\n      currentValues = _ref.currentValues,\n      isValidMap = _ref.isValidMap,\n      errorsMap = _ref.errorsMap,\n      config = _ref.config;\n\n  if (drivePrefix !== undefined && drivePrefix !== \"\") {\n    var currentProvider = findFromConfig(config, drivePrefix);\n    var outputMap = [];\n\n    if (currentProvider !== undefined) {\n      var inputsMap = currentProvider.Options; // console.log(\"current values\" + currentValues);\n\n      /* Options format is as follows\n      {\n                  \"Advanced\": true,\n                  \"Default\": -1,\n                  \"DefaultStr\": \"off\",\n                  \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                  \"Hide\": 0,\n                  \"IsPassword\": false,\n                  \"Name\": \"v2_download_min_size\",\n                  \"NoPrefix\": false,\n                  \"Provider\": \"\",\n                  \"Required\": false,\n                  \"ShortOpt\": \"\",\n                  \"Type\": \"SizeSuffix\",\n                  \"Value\": null,\n                  \"ValueStr\": \"off\"\n              },\n       */\n\n      outputMap = inputsMap.map(function (attr, idx) {\n        if (attr.Hide === 0 && (loadAdvanced && attr.Advanced || !loadAdvanced && !attr.Advanced)) {\n          var labelValue = \"\".concat(attr.Help);\n          var requiredValue = attr.Required ? React.createElement(\"i\", {\n            className: \"text-red\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"*\") : null;\n          var hasExamples = !isEmpty(attr.Examples);\n          var examplesMap = null;\n          var inputType = \"\";\n\n          if (attr.IsPassword) {\n            inputType = \"password\";\n          } else if (hasExamples) {\n            inputType = \"select\";\n            examplesMap = attr.Examples.map(function (ex1, id1) {\n              return React.createElement(\"option\", {\n                key: \"option\" + id1,\n                value: ex1.Value,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 71\n                },\n                __self: this\n              }, ex1.Help);\n            });\n          } else if (attr.Type === \"bool\") {\n            inputType = \"select\";\n            examplesMap = [React.createElement(\"option\", {\n              key: 1,\n              value: true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76\n              },\n              __self: this\n            }, \"Yes\"), React.createElement(\"option\", {\n              key: 2,\n              value: false,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 77\n              },\n              __self: this\n            }, \"No\")];\n          } else {\n            // TODO: Write logic for SizeSuffix, Duration, int\n            if (attr.Type === \"int\") {\n              inputType = \"number\";\n            } else if (attr.Type === \"string\") {\n              inputType = \"text\";\n            } else {\n              inputType = \"text\";\n            }\n          }\n\n          return React.createElement(FormGroup, {\n            key: idx,\n            row: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: attr.Name,\n            sm: 5,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, labelValue, requiredValue), React.createElement(Col, {\n            sm: 7,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(Input, {\n            type: inputType,\n            value: currentValues[attr.Name],\n            name: attr.Name,\n            valid: isValidMap[attr.Name],\n            invalid: !isValidMap[attr.Name],\n            id: attr.Name,\n            onChange: changeHandler,\n            required: attr.Required,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, examplesMap), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, errorsMap[attr.Name])));\n        } else {\n          return null;\n        }\n      });\n    }\n\n    return outputMap;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Select a drive type to continue\");\n} // function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\nfunction CustomInput(_ref2) {\n  var key = _ref2.key,\n      id = _ref2.id,\n      label = _ref2.label,\n      changeHandler = _ref2.changeHandler,\n      type = _ref2.type,\n      value = _ref2.value,\n      name = _ref2.name,\n      placeholder = _ref2.placeholder,\n      _ref2$isValid = _ref2.isValid,\n      isValid = _ref2$isValid === void 0 ? false : _ref2$isValid;\n  return React.createElement(FormGroup, {\n    key: key,\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Label, {\n    for: id,\n    sm: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, label), React.createElement(Col, {\n    sm: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: type,\n    value: value,\n    name: name,\n    placeholder: placeholder,\n    id: id,\n    onChange: changeHandler,\n    valid: isValid,\n    invalid: !isValid,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(FormFeedback, {\n    valid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Sweet! that name is available\"), React.createElement(FormFeedback, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Sad! That name is already assigned or empty\")));\n}\n\nvar NewDrive =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NewDrive, _React$Component);\n\n  function NewDrive(props, context) {\n    var _this;\n\n    _classCallCheck(this, NewDrive);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewDrive).call(this, props, context));\n\n    _this.toggle = function (e) {\n      var name = e.target.name;\n\n      _this.setState(_defineProperty({}, name, !_this.state[name]));\n    };\n\n    _this.handleInputChange = function (e) {\n      // let new_prod_diff = this.state.formValues;\n      // new_prod_diff[e.target.name] = e.target.value;\n      var inputName = e.target.name;\n      var inputValue = e.target.value;\n      var inputType = _this.state.optionTypes[inputName];\n\n      _this.setState({\n        formValues: _objectSpread({}, _this.state.formValues, _defineProperty({}, inputName, inputValue))\n      });\n\n      var validateResult = true;\n      var error = \"\";\n\n      if (inputType === \"SizeSuffix\") {\n        validateResult = validateSizeSuffix(inputValue);\n\n        if (!validateResult) {\n          error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\";\n        }\n      } else if (inputType === \"Duration\") {\n        validateResult = validateDuration(inputValue);\n\n        if (!validateResult) {\n          error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\";\n        }\n      } else if (inputType === \"int\") {\n        validateResult = validateInt(inputValue);\n\n        if (!validateResult) {\n          error = \"The valid input is int (100,200,300 etc)\";\n        }\n      }\n\n      if (_this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n        validateResult = false;\n\n        if (!validateResult) {\n          error += \" This field is required\";\n        }\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          isValid: _objectSpread({}, prevState.isValid, _defineProperty({}, inputName, validateResult)),\n          formErrors: _objectSpread({}, prevState.formErrors, _defineProperty({}, inputName, error))\n        };\n      });\n    };\n\n    _this.changeDriveType = function (event, _ref3) {\n      var newValue = _ref3.newValue;\n      var providers = _this.props.providers;\n      var val = newValue;\n      var availableOptions = {};\n      var optionTypes = {};\n      var isValid = {};\n      var formErrors = {};\n      var required = {}; // let drivePrefix = \"\";\n      // console.log(\"driveType change\", val);\n\n      if (val !== undefined && val !== \"\") {\n        var currentConfig = findFromConfig(providers, val);\n\n        if (currentConfig !== undefined) {\n          currentConfig.Options.forEach(function (item) {\n            var DefaultStr = item.DefaultStr,\n                Type = item.Type,\n                Name = item.Name,\n                Required = item.Required,\n                Hide = item.Hide;\n\n            if (Hide === 0) {\n              availableOptions[Name] = DefaultStr;\n              optionTypes[Name] = Type;\n              required[Name] = Required;\n              if (Required && (!DefaultStr || DefaultStr === \"\")) isValid[Name] = false;else isValid[Name] = true;\n              formErrors[Name] = \"\";\n            }\n          });\n        }\n\n        _this.setState({\n          drivePrefix: val,\n          formValues: availableOptions,\n          optionTypes: optionTypes,\n          isValid: isValid,\n          formErrors: formErrors,\n          required: required\n        });\n      } else {\n        _this.setState({\n          drivePrefix: val\n        });\n      }\n    };\n\n    _this.openSetupDrive = function (e) {\n      if (e) e.preventDefault();\n\n      _this.setState({\n        'colSetup': true\n      });\n\n      _this.setupDriveDiv.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    _this.editAdvancedOptions = function (e) {\n      _this.setState({\n        advancedOptions: !_this.state.advancedOptions\n      });\n    };\n\n    _this.clearForm = function (e) {\n      _this.setState({\n        driveName: \"\",\n        drivePrefix: \"\"\n      });\n    };\n\n    _this.changeName = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        driveName: value\n      }, function () {\n        if (value === undefined || value === \"\") {\n          _this.setState({\n            driveNameIsValid: false\n          });\n        } else {\n          axiosInstance.post('/config/get', {\n            name: value\n          }).then(function (response) {\n            var errors = _this.state.formErrors;\n            var isValid = isEmpty(response.data);\n\n            if (isValid) {\n              errors[\"driveName\"] = \"\";\n            } else {\n              errors[\"driveName\"] = \"Duplicate\";\n            }\n\n            _this.setState({\n              formErrors: errors,\n              driveNameIsValid: isValid\n            });\n          });\n        }\n      });\n    };\n\n    _this.openAdvancedSettings = function (e) {\n      if (_this.state.advancedOptions) {\n        _this.setState({\n          colAdvanced: true\n        });\n      } else {\n        _this.configEndDiv.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    };\n\n    _this.state = {\n      colRconfig: true,\n      colSetup: false,\n      colAdvanced: false,\n      driveName: \"\",\n      advancedOptions: false,\n      formValues: {},\n      formValuesValid: {},\n      required: {},\n      authModalIsVisible: false,\n      drivePrefix: \"\",\n      driveNameIsValid: false,\n      formErrors: {\n        driveName: \"\"\n      },\n      optionTypes: {},\n      isValid: {}\n    };\n    _this.configCheckInterval = null;\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleAuthModal = _this.toggleAuthModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.startAuthentication = _this.startAuthentication.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.checkConfigStatus = _this.checkConfigStatus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(NewDrive, [{\n    key: \"checkConfigStatus\",\n    // Returns true or false based on whether the config is created\n    value: function () {\n      var _checkConfigStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var driveName, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                driveName = this.state.driveName;\n                _context.prev = 1;\n                _context.next = 4;\n                return axiosInstance.post(\"/config/get\", {\n                  name: driveName\n                });\n\n              case 4:\n                res = _context.sent;\n                console.log(res);\n\n                if (!isEmpty(res.data)) {\n                  // Config is created, clear the interval and hide modal\n                  clearInterval(this.configCheckInterval);\n                  this.configCheckInterval = null;\n                  this.toggleAuthModal();\n                  this.props.history.push('/home');\n                }\n\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(\"Error occurred while checking for config: \".concat(_context.t0));\n                toast.error(\"Error creating config. \".concat(_context.t0), {\n                  autoClose: false\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n\n      function checkConfigStatus() {\n        return _checkConfigStatus.apply(this, arguments);\n      }\n\n      return checkConfigStatus;\n    }()\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      //    Validate driveName and other parameters\n      var _this$state = this.state,\n          driveNameIsValid = _this$state.driveNameIsValid,\n          drivePrefix = _this$state.drivePrefix,\n          isValid = _this$state.isValid;\n      var flag = true;\n\n      if (!driveNameIsValid) {\n        flag = false;\n      }\n\n      if (drivePrefix === \"\") {\n        flag = false;\n      }\n      /*Check for validations based on inputType*/\n\n\n      for (var _i = 0, _Object$entries = Object.entries(isValid); _i < _Object$entries.length; _i++) {\n        var _ref6 = _Object$entries[_i];\n\n        var _ref5 = _slicedToArray(_ref6, 2);\n\n        var key = _ref5[0];\n        var value = _ref5[1];\n\n        if (!value) {\n          flag = false;\n          break;\n        }\n      }\n\n      return flag;\n    }\n  }, {\n    key: \"toggleAuthModal\",\n    value: function toggleAuthModal() {\n      this.setState(function (state, props) {\n        return {\n          authModalIsVisible: !state.authModalIsVisible\n        };\n      });\n    }\n  }, {\n    key: \"startAuthentication\",\n    value: function startAuthentication() {\n      this.toggleAuthModal(); // Check every second if the config is created\n\n      if (this.configCheckInterval === null) {\n        this.configCheckInterval = setInterval(this.checkConfigStatus, 1000);\n      } else {\n        console.error(\"Interval already running. Should not start a new one\");\n      }\n    }\n  }, {\n    key: \"stopAuthentication\",\n    value: function stopAuthentication() {\n      this.setState(function (state, props) {\n        return {\n          authModalIsVisible: false\n        };\n      });\n      clearInterval(this.configCheckInterval);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var _this$state2, formValues, drivePrefix, providers, currentProvider, defaults, finalParameterValues, _loop, _i2, _Object$entries2, _ref8, data, res;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                console.log(\"Submitted form\");\n                _this$state2 = this.state, formValues = _this$state2.formValues, drivePrefix = _this$state2.drivePrefix;\n                providers = this.props.providers;\n\n                if (!this.validateForm()) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                if (!(drivePrefix !== undefined && drivePrefix !== \"\")) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                currentProvider = findFromConfig(providers, drivePrefix);\n\n                if (!(currentProvider !== undefined)) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                defaults = currentProvider.Options; // console.log(config, formValues, defaults);\n\n                finalParameterValues = {};\n\n                _loop = function _loop() {\n                  var _ref7 = _Object$entries2[_i2];\n                  _ref8 = _slicedToArray(_ref7, 2);\n                  var key = _ref8[0];\n                  var value = _ref8[1];\n                  var defaultValueObj = defaults.find(function (ele, idx, array) {\n                    return key === ele.Name;\n                  });\n                  var DefaultStr = defaultValueObj.DefaultStr;\n\n                  if (value !== DefaultStr) {\n                    console.log(\"\".concat(value, \" !== \").concat(DefaultStr));\n                    finalParameterValues[key] = value;\n                  }\n                };\n\n                for (_i2 = 0, _Object$entries2 = Object.entries(formValues); _i2 < _Object$entries2.length; _i2++) {\n                  _loop();\n                }\n\n                data = {\n                  parameters: finalParameterValues,\n                  name: this.state.driveName,\n                  type: this.state.drivePrefix\n                };\n                console.log(\"Validated form\");\n                this.startAuthentication();\n                _context2.prev = 15;\n                _context2.next = 18;\n                return axiosInstance.post('/config/create', data);\n\n              case 18:\n                res = _context2.sent;\n                toast.info(\"Config created\");\n                _context2.next = 26;\n                break;\n\n              case 22:\n                _context2.prev = 22;\n                _context2.t0 = _context2[\"catch\"](15);\n                toast.error(\"Error creating config. \".concat(_context2.t0), {\n                  autoClose: false\n                });\n                this.stopAuthentication();\n\n              case 26:\n                _context2.next = 31;\n                break;\n\n              case 28:\n                if (!this.state.colSetup) {\n                  this.openSetupDrive();\n                }\n\n                if (this.state.advancedOptions && !this.state.colAdvanced) {\n                  this.openAdvancedSettings();\n                }\n\n                toast.warn(\"Check for errors before submitting.\", {\n                  autoClose: false\n                });\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[15, 22]]);\n      }));\n\n      function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    //\n    // async getProviders() {\n    //     try {\n    //         let res = await axiosInstance.post(\"/config/providers\");\n    //         const {providers} = res.data;\n    //         this.config = providers;\n    //         // this.setState({config: res.data.providers});\n    //     } catch (e) {\n    //         console.log(`Error getting the provider details: ${e}`);\n    //         toast.error(`Error loading providers. ${e}`, {\n    //             autoClose: false\n    //         });\n    //     }\n    // }\n    value: function componentDidMount() {\n      if (!this.props.providers || this.props.providers.length < 1) this.props.getProviders();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.configCheckInterval);\n      this.configCheckInterval = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          colRconfig = _this$state3.colRconfig,\n          colSetup = _this$state3.colSetup,\n          colAdvanced = _this$state3.colAdvanced,\n          drivePrefix = _this$state3.drivePrefix,\n          advancedOptions = _this$state3.advancedOptions,\n          driveName = _this$state3.driveName,\n          driveNameIsValid = _this$state3.driveNameIsValid;\n      var providers = this.props.providers; // console.log(\"config\", config);\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"This 3 step process will guide you through creating a new config. For auto config, leave the parameters as is.\"), React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"link\",\n        name: \"colRconfig\",\n        onClick: this.toggle,\n        style: {\n          marginBottom: '1rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }, \"Step 1:\"), \" Remote Config\"))), React.createElement(Collapse, {\n        isOpen: colRconfig,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        label: \"Name of this drive (For your reference)\",\n        changeHandler: this.changeName,\n        value: driveName,\n        placeholder: \"Enter a name\",\n        name: \"name\",\n        id: \"driveName\",\n        isValid: driveNameIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      }), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"driveType\",\n        sm: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }, \"Select\"), React.createElement(Col, {\n        sm: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, React.createElement(ProviderAutoSuggest, {\n        suggestions: providers,\n        value: drivePrefix,\n        onChange: this.changeDriveType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"inputDriveName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547\n        },\n        __self: this\n      }, \"Docs are available at \"), ' ', React.createElement(\"a\", {\n        href: \"https://rclone.org/commands/rclone_config/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, \"Rclone Config\")))), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"clearfix\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"success\",\n        className: \"float-right\",\n        onClick: this.openSetupDrive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-check fa-lg \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      })))))), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: function ref(el) {\n          return _this2.setupDriveDiv = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }), React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"link\",\n        name: \"colSetup\",\n        onClick: this.toggle,\n        style: {\n          marginBottom: '1rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }, \"Step 2:\"), \" Setup Drive\"))), React.createElement(Collapse, {\n        isOpen: colSetup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }, React.createElement(DriveParameters, {\n        drivePrefix: drivePrefix,\n        loadAdvanced: false,\n        changeHandler: this.handleInputChange,\n        errorsMap: this.state.formErrors,\n        isValidMap: this.state.isValid,\n        currentValues: this.state.formValues,\n        config: providers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"clearfix\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"checkbox\",\n        value: advancedOptions,\n        onChange: this.editAdvancedOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"mr-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585\n        },\n        __self: this\n      }, \"Edit Advanced Options\"), React.createElement(Button, {\n        color: \"success\",\n        onClick: this.openAdvancedSettings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-check fa-lg \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }))))))), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"link\",\n        name: \"colAdvanced\",\n        onClick: this.toggle,\n        style: {\n          marginBottom: '1rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599\n        },\n        __self: this\n      }, \"Step 3:\"), \" Advanced (optional)\"))), React.createElement(Collapse, {\n        isOpen: colAdvanced,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607\n        },\n        __self: this\n      }, React.createElement(DriveParameters, {\n        drivePrefix: drivePrefix,\n        loadAdvanced: true,\n        changeHandler: this.handleInputChange,\n        errorsMap: this.state.formErrors,\n        isValidMap: this.state.isValid,\n        currentValues: this.state.formValues,\n        config: providers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"clearfix\",\n        ref: function ref(el) {\n          _this2.configEndDiv = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"float-right mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"info\",\n        type: \"reset\",\n        onClick: function onClick() {\n          return _this2.clearForm();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621\n        },\n        __self: this\n      }, \"Clear\"), React.createElement(Button, {\n        color: \"success\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622\n        },\n        __self: this\n      }, \"Create Config\")))), React.createElement(NewDriveAuthModal, {\n        isVisible: this.state.authModalIsVisible,\n        closeModal: this.toggleAuthModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NewDrive;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    providers: state.config.providers\n  };\n};\n\nNewDrive.propTypes = {\n  providers: PropTypes.array.isRequired,\n  getProviders: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  getProviders: getProviders\n})(NewDrive);","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/NewDrive/NewDrive.js"],"names":["React","Button","Card","CardBody","CardFooter","CardHeader","Col","Collapse","Form","FormFeedback","FormGroup","Input","Label","NewDriveAuthModal","axiosInstance","isEmpty","findFromConfig","validateDuration","validateInt","validateSizeSuffix","ProviderAutoSuggest","toast","PropTypes","getProviders","connect","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","config","undefined","currentProvider","outputMap","inputsMap","Options","map","attr","idx","Hide","Advanced","labelValue","Help","requiredValue","Required","hasExamples","Examples","examplesMap","inputType","IsPassword","ex1","id1","Value","Type","Name","CustomInput","key","id","label","type","value","name","placeholder","isValid","NewDrive","props","context","toggle","e","target","setState","state","handleInputChange","inputName","inputValue","optionTypes","formValues","validateResult","error","required","prevState","formErrors","changeDriveType","event","newValue","providers","val","availableOptions","currentConfig","forEach","item","DefaultStr","openSetupDrive","preventDefault","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsValid","post","then","response","errors","data","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","colSetup","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","bind","toggleAuthModal","startAuthentication","checkConfigStatus","res","console","log","clearInterval","history","push","autoClose","flag","Object","entries","setInterval","validateForm","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","info","stopAuthentication","warn","length","marginBottom","el","Component","mapStateToProps","propTypes","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../utils/API\";\nimport isEmpty, {findFromConfig, validateDuration, validateInt, validateSizeSuffix} from \"../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport PropTypes from 'prop-types';\nimport {getProviders} from \"../../actions/configActions\";\nimport {connect} from \"react-redux\";\n\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"select\";\n                        examplesMap = attr.Examples.map((ex1, id1) => {\n                            return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(\"/config/get\", {name: driveName});\n            console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/home');\n\n            }\n        } catch (e) {\n            console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    handleInputChange = (e) => {\n        // let new_prod_diff = this.state.formValues;\n        // new_prod_diff[e.target.name] = e.target.value;\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n\n    };\n\n    // Update the driveType and then load the equivalent input parameters for that drive\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        if (Required && (!DefaultStr || DefaultStr === \"\"))\n                            isValid[Name] = false;\n                        else\n                            isValid[Name] = true;\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n\n\n\n\n    };\n\n    // Open second step of setting up the drive\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    // Decide whether to use advanced options\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, 1000);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            return (key === ele.Name);\n                        });\n\n                        const {DefaultStr} = defaultValueObj;\n                        if (value !== DefaultStr) {\n                            console.log(`${value} !== ${DefaultStr}`);\n                            finalParameterValues[key] = value;\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        let res = await axiosInstance.post('/config/create', data);\n                        toast.info(\"Config created\");\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n\n    changeName = e => {\n        const value = e.target.value;\n\n        this.setState({driveName: value}, () => {\n\n            if (value === undefined || value === \"\") {\n                this.setState({driveNameIsValid: false});\n            } else {\n\n                axiosInstance.post('/config/get', {name: value}).then((response) => {\n                    let errors = this.state.formErrors;\n                    let isValid = isEmpty(response.data);\n                    if (isValid) {\n                        errors[\"driveName\"] = \"\";\n                    } else {\n                        errors[\"driveName\"] = \"Duplicate\";\n\n                    }\n                    this.setState({formErrors: errors, driveNameIsValid: isValid});\n                });\n            }\n\n        });\n    };\n\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n    //\n    // async getProviders() {\n    //     try {\n    //         let res = await axiosInstance.post(\"/config/providers\");\n    //         const {providers} = res.data;\n    //         this.config = providers;\n    //         // this.setState({config: res.data.providers});\n    //     } catch (e) {\n    //         console.log(`Error getting the provider details: ${e}`);\n    //         toast.error(`Error loading providers. ${e}`, {\n    //             autoClose: false\n    //         });\n    //     }\n    // }\n\n\n    componentDidMount() {\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div>\n                <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                    parameters as is.</p>\n                <Form onSubmit={this.handleSubmit}>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote Config</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colRconfig}>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                            </CardBody>\n\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                        className=\"fa fa-check fa-lg \"/></Button>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        {/*div for Scrolling to here*/}\n                        <div ref={(el) => this.setupDriveDiv = el}/>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colSetup}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n                            <CardFooter>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n\n                                    </div>\n                                </div>\n                            </CardFooter>\n\n                        </Collapse>\n                    </Card>\n                    <Card>\n                        <CardHeader>\n                            <h5>\n                                <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                        style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                    (optional)</Button>\n\n                            </h5>\n\n                        </CardHeader>\n                        <Collapse isOpen={colAdvanced}>\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n                            </CardBody>\n\n                        </Collapse>\n                    </Card>\n                    <div className=\"clearfix\" ref={(el) => {\n                        this.configEndDiv = el\n                    }}>\n                        <div className=\"float-right mb-3\">\n                            <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                            <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                        </div>\n                    </div>\n                </Form>\n                <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired\n\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"]},"metadata":{},"sourceType":"module"}