{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/Base/NewFolder/NewFolder.js\";\nimport React from 'react';\nimport { Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API\";\nimport RemoteExplorerContext from \"../../RemoteExplorer/RemoteExplorerContext\";\nimport { toast } from \"react-toastify\";\nimport { addColonAtLast } from \"../../../utils/Tools\";\n\nvar NewFolder =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NewFolder, _React$Component);\n\n  function NewFolder(props) {\n    var _this;\n\n    _classCallCheck(this, NewFolder);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewFolder).call(this, props));\n\n    _this.disableForm = function (shouldDisable) {\n      _this.setState({\n        disableForm: shouldDisable\n      });\n    };\n\n    _this.changeName = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        name: value\n      });\n    };\n\n    _this.state = {\n      name: \"\",\n      disableForm: false\n    };\n    _this.createNewFolder = _this.createNewFolder.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(NewFolder, [{\n    key: \"createNewFolder\",\n    value: function () {\n      var _createNewFolder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this$context, remoteName, remotePath, fsInfo, name, data, res;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"Form Submitted\");\n                _this$context = this.context, remoteName = _this$context.remoteName, remotePath = _this$context.remotePath, fsInfo = _this$context.fsInfo;\n                name = this.state.name;\n                remoteName = addColonAtLast(remoteName); // remotePath = this.state.name;\n\n                _context.prev = 4;\n                console.log(\"fsInfo\", fsInfo);\n\n                if (fsInfo.Features.BucketBased && remotePath === \"\") {\n                  /*Trying to create a bucket, not a dir*/\n                  remoteName += name;\n                } else {\n                  /*Normal directory*/\n                  if (remotePath === \"\") {\n                    remotePath = name;\n                  } else {\n                    remotePath += \"/\" + name;\n                  }\n                }\n\n                data = {\n                  fs: remoteName,\n                  remote: remotePath\n                };\n                console.log(\"Data\", data);\n                /*Disable form submit button*/\n\n                this.disableForm(true);\n                /*Network Request*/\n\n                _context.next = 12;\n                return axiosInstance.post(\"operations/mkdir\", data);\n\n              case 12:\n                res = _context.sent;\n                console.log(\"mkdir\", res);\n                this.disableForm(false);\n                this.toggle();\n                toast.info(\"Folder created: \".concat(remotePath));\n                _context.next = 23;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](4);\n                this.disableForm(false);\n\n                if (_context.t0.response) {\n                  toast.error(\"Error creating folder: \".concat(_context.t0.response.data.error));\n                } else {\n                  toast.error(\"Error creating folder: \".concat(_context.t0));\n                } // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 19]]);\n      }));\n\n      function createNewFolder() {\n        return _createNewFolder.apply(this, arguments);\n      }\n\n      return createNewFolder;\n    }()\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n      this.createNewFolder();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.props.closeModal();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          name = _this$state.name,\n          disableForm = _this$state.disableForm;\n      var isVisible = this.props.isVisible;\n      return React.createElement(Modal, {\n        isOpen: isVisible,\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Enter the name for the folder\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"folderName\",\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Enter the name\"), React.createElement(Col, {\n        sm: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"folderName\",\n        id: \"folderName\",\n        value: name,\n        onChange: this.changeName,\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"clearfix\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        color: \"success\",\n        className: \"float-right\",\n        disabled: disableForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-check fa-lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), \"Create folder\"))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return NewFolder;\n}(React.Component);\n\nNewFolder.contextType = RemoteExplorerContext;\nvar propTypes = {\n  isVisible: PropTypes.bool.isRequired,\n  closeModal: PropTypes.func.isRequired\n};\nNewFolder.propTypes = propTypes;\nexport default NewFolder;","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/Base/NewFolder/NewFolder.js"],"names":["React","Button","Col","Form","FormGroup","Input","Label","Modal","ModalBody","ModalFooter","ModalHeader","PropTypes","axiosInstance","RemoteExplorerContext","toast","addColonAtLast","NewFolder","props","disableForm","shouldDisable","setState","changeName","e","value","target","name","state","createNewFolder","bind","handleSubmit","toggle","console","log","context","remoteName","remotePath","fsInfo","Features","BucketBased","data","fs","remote","post","res","info","response","error","preventDefault","closeModal","isVisible","Component","contextType","propTypes","bool","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API\";\nimport RemoteExplorerContext from \"../../RemoteExplorer/RemoteExplorerContext\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\n\n\nclass NewFolder extends React.Component {\n    static contextType = RemoteExplorerContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        console.log(\"Form Submitted\");\n        let {remoteName, remotePath, fsInfo} = this.context;\n        let {name} = this.state;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n            console.log(\"Data\", data);\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n            /*Network Request*/\n            let res = await axiosInstance.post(\"operations/mkdir\", data);\n            console.log(\"mkdir\", res);\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`)\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle}>\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Enter the name for the folder</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={3}>Enter the name</Label>\n                            <Col sm={9}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                    <ModalFooter>\n\n                    </ModalFooter>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nexport default NewFolder;"]},"metadata":{},"sourceType":"module"}