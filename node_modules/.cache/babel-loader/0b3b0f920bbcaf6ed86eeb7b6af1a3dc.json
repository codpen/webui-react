{"ast":null,"code":"import _objectSpread from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS } from \"../actions/types\";\nvar initialState = {\n  providers: [],\n  configDump: {}\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_PROVIDERS:\n      return _objectSpread({}, state, {\n        providers: action.payload\n      });\n\n    case GET_CONFIG_DUMP:\n      if (action.status === REQUEST_SUCCESS) return _objectSpread({}, state, {\n        configDump: action.payload\n      });\n      if (action.status === REQUEST_ERROR) return _objectSpread({}, state, {\n        hasError: true,\n        error: action.payload\n      });\n      break;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/reducers/configReducer.js"],"names":["GET_CONFIG_DUMP","GET_PROVIDERS","REQUEST_ERROR","REQUEST_SUCCESS","initialState","providers","configDump","state","action","type","payload","status","hasError","error"],"mappings":";AAAA,SAAQA,eAAR,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,eAAvD,QAA6E,kBAA7E;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,EADM;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;AAKA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBH,YAAsB;AAAA,MAARI,MAAQ;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,aAAL;AACI,+BACOM,KADP;AAEIF,QAAAA,SAAS,EAAEG,MAAM,CAACE;AAFtB;;AAKJ,SAAKV,eAAL;AACI,UAAIQ,MAAM,CAACG,MAAP,KAAkBR,eAAtB,EACI,yBACOI,KADP;AAEID,QAAAA,UAAU,EAAEE,MAAM,CAACE;AAFvB;AAIJ,UAAIF,MAAM,CAACG,MAAP,KAAkBT,aAAtB,EACI,yBACOK,KADP;AAEIK,QAAAA,QAAQ,EAAE,IAFd;AAGIC,QAAAA,KAAK,EAAEL,MAAM,CAACE;AAHlB;AAKJ;;AACJ;AACI,aAAOH,KAAP;AArBR;AAuBH","sourcesContent":["import {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\n\nconst initialState = {\n    providers: [],\n    configDump: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PROVIDERS:\n            return {\n                ...state,\n                providers: action.payload,\n            };\n\n        case GET_CONFIG_DUMP:\n            if (action.status === REQUEST_SUCCESS)\n                return {\n                    ...state,\n                    configDump: action.payload\n                };\n            if (action.status === REQUEST_ERROR)\n                return {\n                    ...state,\n                    hasError: true,\n                    error: action.payload\n                };\n            break;\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}