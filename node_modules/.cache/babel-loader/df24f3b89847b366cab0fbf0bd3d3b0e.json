{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport './Global';\nvar axiosInstance = axios.create({\n  baseURL: localStorage.getItem('ipAddress'),\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: \"json\"\n});\naxiosInstance.interceptors.request.use(function (config) {\n  config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password')); // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n  return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n  return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nfunction performCopyOrMoveFile(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n  return _performCopyOrMoveFile.apply(this, arguments);\n}\n\nfunction _performCopyOrMoveFile() {\n  _performCopyOrMoveFile = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    var url, splitRes, data, _data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"\";\n\n            if (mode === \"move\") {\n              if (IsDir) {\n                url = \"/sync/move\";\n              } else {\n                url = \"/operations/movefile\";\n              }\n            } else {\n              if (IsDir) {\n                url = \"/sync/copy\";\n              } else {\n                url = \"/operations/copyfile\";\n              }\n            }\n\n            if (!IsDir) {\n              _context.next = 10;\n              break;\n            }\n\n            splitRes = srcRemote.split('/');\n            data = {\n              srcFs: srcFs + srcRemote,\n              dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1]\n            }; // console.log(\"dirop:\", data);\n\n            _context.next = 7;\n            return axiosInstance.post(url, data);\n\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n            if (dstRemote === \"\") {\n              dstRemote = Name;\n            } else {\n              dstRemote += \"/\" + Name;\n            }\n\n            _data = {\n              srcFs: srcFs,\n              srcRemote: srcRemote,\n              dstFs: dstFs,\n              dstRemote: dstRemote\n            };\n            _context.next = 14;\n            return axiosInstance.post(url, _data);\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _performCopyOrMoveFile.apply(this, arguments);\n}\n\nexport default axiosInstance;","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/utils/API.js"],"names":["axios","axiosInstance","create","baseURL","localStorage","getItem","headers","responseType","interceptors","request","use","config","Authorization","btoa","error","Promise","reject","performMoveFile","srcFs","srcRemote","dstFs","dstRemote","Name","IsDir","performCopyOrMoveFile","performCopyFile","mode","url","splitRes","split","data","length","post"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport './Global'\n\n\nlet axiosInstance = axios.create({\n    baseURL: localStorage.getItem('ipAddress'),\n    headers: {'Content-Type': 'application/json'},\n    responseType: \"json\"\n});\n\naxiosInstance.interceptors.request.use(\n    config => {\n        config.headers.Authorization = 'Basic ' + btoa(localStorage.getItem('username') + \":\" + localStorage.getItem('password'));\n        // console.log(config, localStorage.getItem('username'), localStorage.getItem('password'));\n        return config;\n    },\n    error => Promise.reject(error)\n);\n\n\nexport function performMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'move');\n}\n\nexport function performCopyFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir) {\n\n    return performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, 'copy');\n}\n\nasync function performCopyOrMoveFile(srcFs, srcRemote, dstFs, dstRemote, Name, IsDir, mode) {\n    let url = \"\";\n    if (mode === \"move\") {\n        if (IsDir) {\n            url = \"/sync/move\";\n        } else {\n            url = \"/operations/movefile\";\n        }\n    } else {\n        if (IsDir) {\n            url = \"/sync/copy\";\n        } else {\n            url = \"/operations/copyfile\";\n        }\n    }\n    if (IsDir) {\n\n        const splitRes = srcRemote.split('/');\n\n        const data = {\n            srcFs: srcFs + srcRemote,\n            dstFs: dstFs + dstRemote + \"/\" + splitRes[splitRes.length - 1]\n        };\n\n        // console.log(\"dirop:\", data);\n\n        return await axiosInstance.post(url, data);\n\n    } else {\n        if (dstRemote === \"\") {\n            dstRemote = Name;\n        } else {\n            dstRemote += \"/\" + Name;\n        }\n\n        const data = {\n            srcFs: srcFs,\n            srcRemote: srcRemote,\n            dstFs: dstFs,\n            dstRemote: dstRemote\n        };\n        return await axiosInstance.post(url, data);\n\n    }\n}\n\nexport default axiosInstance;\n"]},"metadata":{},"sourceType":"module"}