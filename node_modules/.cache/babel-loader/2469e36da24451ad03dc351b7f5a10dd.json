{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/rclone-webui-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/workspace/rclone-webui-react/src/views/FilesView/FileComponent.js\";\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { ItemTypes } from './Constants';\nimport { DragSource } from 'react-dnd';\nimport { formatBytes } from \"../../utils/Tools\";\nimport { performCopyFile, performMoveFile } from \"../../utils/API\";\nimport { toast } from \"react-toastify\";\nvar fileComponentSource = {\n  beginDrag: function beginDrag(props) {\n    console.log(\"props\", props, props.remoteName);\n    var _props$item = props.item,\n        Name = _props$item.Name,\n        Path = _props$item.Path,\n        IsDir = _props$item.IsDir;\n    return {\n      Name: Name,\n      Path: Path,\n      IsDir: IsDir,\n      remoteName: props.remoteName\n    };\n  },\n  endDrag: function () {\n    var _endDrag = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(props, monitor, component) {\n      var _monitor$getDropResul, srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!monitor.getDropResult()) {\n                _context.next = 14;\n                break;\n              }\n\n              _monitor$getDropResul = monitor.getDropResult(), srcRemoteName = _monitor$getDropResul.srcRemoteName, srcRemotePath = _monitor$getDropResul.srcRemotePath, destRemoteName = _monitor$getDropResul.destRemoteName, destRemotePath = _monitor$getDropResul.destRemotePath, Name = _monitor$getDropResul.Name, IsDir = _monitor$getDropResul.IsDir, dropEffect = _monitor$getDropResul.dropEffect, updateHandler = _monitor$getDropResul.updateHandler;\n\n              if (!(dropEffect === \"move\")) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 6;\n              return performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n\n            case 6:\n              // console.log(\"endDrag\", props, monitor, monitor.getItem(), component);\n              updateHandler();\n\n              if (IsDir) {\n                toast.info(\"Directory copied: \".concat(Name));\n              } else {\n                toast.info(\"File copied: \".concat(Name));\n              }\n\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n\n            case 12:\n              // console.log(\"endDrag\", props, monitor, monitor.getItem(), component);\n              updateHandler();\n\n              if (IsDir) {\n                toast.info(\"Directory moved: \".concat(Name));\n              } else {\n                toast.info(\"File moved: \".concat(Name));\n              }\n\n            case 14:\n              _context.next = 21;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              error = _context.t0.response ? _context.t0.response : _context.t0;\n              console.log(JSON.stringify(error));\n              toast.error(\"Error copying file(s). \".concat(error.data.error), {\n                autoClose: false\n              });\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 16]]);\n    }));\n\n    function endDrag(_x, _x2, _x3) {\n      return _endDrag.apply(this, arguments);\n    }\n\n    return endDrag;\n  }()\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n} // TODO: Add mode parameter for card view or list view\n\n\nfunction FileIcon(_ref) {\n  var IsDir = _ref.IsDir,\n      MimeType = _ref.MimeType;\n  var className = \"fa-file\";\n\n  if (IsDir) {\n    className = \"fa-folder\";\n  } else if (MimeType === \"application/pdf\") {\n    className = \"fa-file-pdf-o\";\n  } else if (MimeType === \"image/jpeg\") {\n    className = \"fa-file-image-o\";\n  } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n    className = \"fa-file-archive-o\";\n  } else if (MimeType === \"text/plain\") {\n    className = \"fa-file-text-o\";\n  } else if (MimeType === \"text/x-vcard\") {\n    className = \"fa-address-card-o\";\n  }\n\n  return React.createElement(\"i\", {\n    className: className + \" fa fa-lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n}\n\nfunction confirmDelete(deleteHandle, item) {\n  if (window.confirm(\"Are you sure you want to delete \".concat(item.Name))) {\n    deleteHandle(item);\n  }\n}\n\nfunction Actions(_ref2) {\n  var downloadHandle = _ref2.downloadHandle,\n      deleteHandle = _ref2.deleteHandle,\n      item = _ref2.item;\n  var IsDir = item.IsDir;\n\n  if (!IsDir) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"link\",\n      onClick: function onClick() {\n        return downloadHandle(item);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-cloud-download fa-lg d-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(Button, {\n      color: \"link\",\n      className: \"text-danger\",\n      onClick: function onClick() {\n        return confirmDelete(deleteHandle, item);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-remove fa-lg d-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(Button, {\n      color: \"link\",\n      className: \"text-danger\",\n      onClick: function onClick() {\n        return confirmDelete(deleteHandle, item);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-remove fa-lg d-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n} // Non used props are required for drag-and-drop functionality\n\n\nfunction FileComponent(_ref3) {\n  var item = _ref3.item,\n      clickHandler = _ref3.clickHandler,\n      downloadHandle = _ref3.downloadHandle,\n      deleteHandle = _ref3.deleteHandle,\n      connectDragSource = _ref3.connectDragSource;\n\n  /*\n  MimeTypes: https://www.freeformatter.com/mime-types-list.html\n  * {\n  * For Directory\n  \"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n  \"IsDir\": true,\n  \"MimeType\": \"inode/directory\",\n  \"ModTime\": \"2019-02-12T14:23:33.440Z\",\n  \"Name\": \"two pass 28-1-19\",\n  \"Path\": \"two pass 28-1-19\",\n  \"Size\": -1\n  },\n  *\n  * // For non-directory\n  * {\n  \"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n  \"IsDir\": false,\n  \"MimeType\": \"application/octet-stream\",\n  \"ModTime\": \"2018-11-18T13:14:54.068Z\",\n  \"Name\": \"streamlined-gdoc.gdoc\",\n  \"Path\": \"streamlined-gdoc.gdoc\",\n  \"Size\": 173\n  },\n   * */\n  var IsDir = item.IsDir,\n      MimeType = item.MimeType,\n      ModTime = item.ModTime,\n      Name = item.Name,\n      Size = item.Size;\n  var modTime = new Date(Date.parse(ModTime));\n  return connectDragSource(React.createElement(\"tr\", {\n    className: \"pointer-cursor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    onClick: function onClick(e) {\n      return clickHandler(e, item);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(FileIcon, {\n    IsDir: IsDir,\n    MimeType: MimeType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), \" \", Name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, Size === -1 ? \"NA\" : formatBytes(Size, 2)), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, modTime.toLocaleDateString()), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(Actions, {\n    downloadHandle: downloadHandle,\n    deleteHandle: deleteHandle,\n    item: item,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }))));\n}\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(FileComponent);","map":{"version":3,"sources":["/workspace/rclone-webui-react/src/views/FilesView/FileComponent.js"],"names":["React","Button","ItemTypes","DragSource","formatBytes","performCopyFile","performMoveFile","toast","fileComponentSource","beginDrag","props","console","log","remoteName","item","Name","Path","IsDir","endDrag","monitor","component","getDropResult","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","info","error","response","JSON","stringify","data","autoClose","collect","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","FileIcon","MimeType","className","confirmDelete","deleteHandle","window","confirm","Actions","downloadHandle","FileComponent","clickHandler","ModTime","Size","modTime","Date","parse","e","toLocaleDateString","FILECOMPONENT"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Button} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../utils/API\";\nimport {toast} from \"react-toastify\";\n\nconst fileComponentSource = {\n    beginDrag(props) {\n        console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName\n        }\n    },\n\n    async endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        try {\n            if (monitor.getDropResult()) {\n\n                const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = monitor.getDropResult();\n\n                if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n                    await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    // console.log(\"endDrag\", props, monitor, monitor.getItem(), component);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory copied: ${Name}`);\n                    } else {\n                        toast.info(`File copied: ${Name}`);\n                    }\n\n                } else {\n                    await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n                    // console.log(\"endDrag\", props, monitor, monitor.getItem(), component);\n                    updateHandler();\n                    if (IsDir) {\n                        toast.info(`Directory moved: ${Name}`);\n                    } else {\n                        toast.info(`File moved: ${Name}`);\n                    }\n\n                }\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error.data.error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\n\n// TODO: Add mode parameter for card view or list view\nfunction FileIcon({IsDir, MimeType}) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item}) {\n\n    const {IsDir} = item;\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                    <i className={\"fa fa-remove fa-lg d-inline\"}/>\n                </Button>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <Button color=\"link\" className=\"text-danger\" onClick={() => confirmDelete(deleteHandle, item)}>\n                <i className={\"fa fa-remove fa-lg d-inline\"}/>\n            </Button>\n        )\n    }\n}\n\n// Non used props are required for drag-and-drop functionality\nfunction FileComponent({item, clickHandler, downloadHandle, deleteHandle, connectDragSource, /*isDragging, remoteName*/}) {\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n    const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n    let modTime = new Date(Date.parse(ModTime));\n\n    return connectDragSource(\n        <tr className={\"pointer-cursor\"}>\n            <td><input type=\"checkbox\"/></td>\n            <td onClick={(e) => clickHandler(e, item)}><FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}</td>\n            <td>{Size === -1 ? \"NA\" : formatBytes(Size, 2)}</td>\n            <td>{modTime.toLocaleDateString()}</td>\n            <td><Actions downloadHandle={downloadHandle} deleteHandle={deleteHandle} item={item}/></td>\n        </tr>\n    )\n}\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(FileComponent);\n"]},"metadata":{},"sourceType":"module"}